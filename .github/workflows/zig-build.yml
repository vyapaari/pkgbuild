name: Zig Mingw-w64 Build

on:
  push:
    branches: [main, master]
    paths: ['PKGBUILD', '.github/workflows/zig-build.yml', '.github/scripts/install-deps.sh', '.github/scripts/update-cache.sh'] 
  pull_request:
    branches: [main, master]
    paths: ['PKGBUILD']
  workflow_dispatch:

env:
  ZIG_VERSION: "0.15.1"
  BUILD_JOBS: 2
  MINGW_ARCH: mingw64
  MINGW_PREFIX: /mingw64

jobs:
  build-zig:
    runs-on: windows-2022
    timeout-minutes: 240

    steps:
      - name: Setup Git for Windows SDK
        uses: git-for-windows/setup-git-for-windows-sdk@v1
        with:
          flavor: full
          architecture: x86_64
          cache: true

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Verify Git SDK environment
        shell: bash
        env:
          MSYSTEM: MINGW64
          PATH: /mingw64/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin
        run: |
          echo "Git SDK Environment:"
          git --version
          which git
          echo "Working directory:"
          pwd
          ls -la
      
      - name: Cache Pacman Packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/pacman/pkg
            /mingw64/bin
            /mingw64/lib
            /mingw64/include
          key: mingw64-deps-${{ runner.os }}-${{ hashFiles('PKGBUILD') }}
          restore-keys: |
            mingw64-deps-${{ runner.os }}- 
              
      - name: Verify cache status
        shell: bash
        run: |
          echo "Cache status: First run - no cache found yet (this is normal)"
          echo "Cache key: mingw64-deps-$RUNNER_OS-$(sha256sum PKGBUILD 2>/dev/null | cut -d' ' -f1 || echo 'no-pkgbuild')"
          echo "After this workflow completes, the cache will be created for future runs"        
                
      - name: Make Scripts Executable
        shell: bash
        run: | 
            if [ -d ".github/scripts" ]; then
              chmod +x .github/scripts/*.sh
            else
            echo "No scripts directory found, skipping"
            fi
      
      - name: Install build dependencies
        shell: bash
        env:
          MSYSTEM: MINGW64
          PATH: /mingw64/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin
        run: ./.github/scripts/install-deps.sh    

      - name: Save Pacman Packages Cache
        uses: actions/cache/save@v4
        if: always() # Crucial: save even if later steps fail
        with:
          path: |
              /var/cache/pacman/pkg
              /mingw64/bin
              /mingw64/lib
              /mingw64/include
          key: mingw64-deps-${{ runner.os }}-${{ hashFiles('PKGBUILD') }}
     
      - name: Verify Build Tools
        shell: bash
        env:
          MSYSTEM: MINGW64
          PATH: /mingw64/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin
        run: ./.github/scripts/verify-build.sh
        
      - name: Cache Zig Source
        uses: actions/cache@v4
        with:
          path: |
            zig-source.tar.xz
            zig-source/
          key: zig-source-${{ runner.os }}-${{ hashFiles('PKGBUILD') }}
          restore-keys: 
            zig-source-${{ env.ZIG_VERSION }}

      - name: Verify Zig cache setup
        shell: bash
        run: |
          echo "Cache setup complete - warnings are normal for first run"
          echo "Cache key: zig-source-$ZIG_VERSION"
          echo "Next runs will use cached dependencies once this build completes"       

      - name: Verify Zig Cache Download
        shell: bash 
        run: |
          if [ -f "zig-source.tar.xz" ]; then
            echo "✓ Source archive found in cache"
          else
            echo "Source archive not in cache (normal for first run), will download..."
          fi
          
          if [ -d "zig-source" ]; then
            echo "✓ Source directory found in cache"
          else
            echo "Source directory not in cache (normal for first run), will extract..."
          fi   

      - name: Download and extract Zig source
        shell: bash
        env:
          MSYSTEM: MINGW64
          PATH: /mingw64/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin
        run: ./.github/scripts/zig-source.sh
      
      - name: Save Zig Source Cache
        uses: actions/cache/save@v4
        if: always() # Save even if the build fails later
        with:
           path: |
            zig-source.tar.xz
            zig-source/
           key: zig-source-${{ runner.os }}-${{ hashFiles('PKGBUILD') }}   

      - name: Verify zig-source exists
        shell: bash
        run: |
            echo "Checking if zig-source directory exists..."
            if [ -d "zig-source" ]; then
              echo "✓ zig-source directory found"
              echo "Contents:"
              ls -la zig-source/
            else
              echo "ERROR: zig-source directory not found!"
              echo "Current directory contents:"
              ls -la
              exit 1
            fi
      
          # --- NEW STEP: SOLVE LINKING ISSUES ---
      - name: Install missing system libraries for linking
        shell: bash
        run: |
          echo "Installing missing system libraries (zlib, zstd, ntldd) to resolve linker errors..."
          pacman -S --noconfirm --needed \
            mingw-w64-x86_64-{zlib,zstd,ntldd,} \
            echo "Missing libraries installed"

      - name: Configure build environment
        shell: bash
        env:
          MSYSTEM: MINGW64
          PATH: /mingw64/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin
        run: |
          set -euo pipefail
          echo "Preparing build environment"
         
          # Check if source directory exists first
          if [ ! -d "zig-source" ]; then
            echo "ERROR: zig-source directory not found!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi

          cd zig-source
          # Create build directory
          mkdir -p build
          cd build
          echo "Build directory: $(pwd)" 
         
          # Create minimal config templates that match your CMake variables
          cat > config.h.in << 'EOF'
          #ifndef ZIG_CONFIG_H
          #define ZIG_CONFIG_H
          #pragma once

          // Basic version info
          #define ZIG_VERSION_MAJOR @ZIG_VERSION_MAJOR@
          #define ZIG_VERSION_MINOR @ZIG_VERSION_MINOR@
          #define ZIG_VERSION_PATCH @ZIG_VERSION_PATCH@
          #define ZIG_VERSION_STRING "@ZIG_VERSION@"

          // Essential build configuration
          #define ZIG_HAVE_LLVM @ZIG_HAVE_LLVM@
          #define ZIG_ENABLE_LOGGING @ZIG_ENABLE_LOGGING@
          #define ZIG_BUILD_TYPE "@CMAKE_BUILD_TYPE@"
          #define ZIG_INSTALL_PREFIX "@CMAKE_INSTALL_PREFIX@"

          // Critical missing fields from build errors
          #define ZIG_SKIP_NON_NATIVE @ZIG_SKIP_NON_NATIVE@
          #define ZIG_ENABLE_LINK_SNAPSHOTS @ZIG_ENABLE_LINK_SNAPSHOTS@
          #define ZIG_VALUE_INTERPRET_MODE @ZIG_VALUE_INTERPRET_MODE@
          #define ZIG_HAVE_ARO @ZIG_HAVE_ARO@
          #endif
          EOF

          cat > config.zig.in << 'EOF'
          // Version information
          pub const version_string = "@ZIG_VERSION@";
          pub const version = "@ZIG_VERSION@";
          pub const version_major = @ZIG_VERSION_MAJOR@;
          pub const version_minor = @ZIG_VERSION_MINOR@;
          pub const version_patch = @ZIG_VERSION_PATCH@;

          // LLVM support - critical for build
          pub const have_llvm = @ZIG_HAVE_LLVM@;

          // Debug and logging configuration
          pub const enable_logging = @ZIG_ENABLE_LOGGING@;

          // Critical missing fields from build errors
          pub const skip_non_native = @ZIG_SKIP_NON_NATIVE@;
          pub const enable_link_snapshots = @ZIG_ENABLE_LINK_SNAPSHOTS@;
          pub const value_interpret_mode = @ZIG_VALUE_INTERPRET_MODE@;
          pub const have_aro = @ZIG_HAVE_ARO@;

          // Build type
          pub const build_type = "@CMAKE_BUILD_TYPE@";

          // Path configuration
          pub const install_prefix = "@CMAKE_INSTALL_PREFIX@";
          EOF

          echo "Minimal config templates created with only essential fields"

      - name: Check system resources
        shell: bash
        run: |
          echo "=== System Resources Before Build ==="
          echo "CPU cores: $(nproc || echo "unknown")"
          echo "Memory:"
          free -h || echo "free command not available"
          echo "Disk space:"
          df -h || echo "df command not available"
          echo "Build will use:"
          echo "- CMake: $(which cmake || which cmake.exe)"
          echo "- Ninja: $(which ninja || which ninja.exe)" 
          echo "- GCC: $(which gcc || which gcc.exe)"
          echo "=== ========================= ==="    

      - name: Build Zig (Stage 1 - CMake)
        shell: bash
        env:
          MSYSTEM: MINGW64
          PATH: /mingw64/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin
          PKG_CONFIG_PATH: /mingw64/lib/pkgconfig:/mingw64/share/pkgconfig
          CPPFLAGS: -I/mingw64/include
          LDFLAGS: -L/mingw64/lib
        run: |
          echo "Starting CMake build (Stage 1)..."
          
          # Determine tool paths explicitly
          CMAKE_CMD=""
          NINJA_CMD=""
          
          if [ -f "/mingw64/bin/cmake.exe" ]; then
            CMAKE_CMD="/mingw64/bin/cmake.exe"
          elif command -v cmake >/dev/null 2>&1; then
            CMAKE_CMD="cmake"
          else
            echo "ERROR: cmake not found"
            exit 1
          fi
          
          if [ -f "/mingw64/bin/ninja.exe" ]; then
            NINJA_CMD="/mingw64/bin/ninja.exe"
          elif command -v ninja >/dev/null 2>&1; then
            NINJA_CMD="ninja"
          else
            echo "ERROR: ninja not found"
            exit 1
          fi
          
          echo "Using CMAKE: $CMAKE_CMD"
          echo "Using NINJA: $NINJA_CMD"
          echo "Environment verification:"
          echo "MSYSTEM: $MSYSTEM"
          echo "PATH: $PATH"
          echo "Working directory: $(pwd)"
          
          $CMAKE_CMD --version | head -1 || echo "cmake version check failed but proceeding"
          $NINJA_CMD --version || echo "ninja version check failed but proceeding"
          echo "gcc version: $(gcc --version | head -1 || echo 'gcc version check failed')"
          
          # Check if source directory exists
          if [ ! -d "zig-source" ]; then
            echo "Error: zig-source directory not found"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          
          cd zig-source/build
          echo "Build directory: $(pwd)"
          echo "Parent directory contents:"
          ls -la ..
          
          # Configure with CMake using explicit command
          echo "Configuring with CMake..."
          MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
          /mingw64/bin/cmake.exe .. -G Ninja \
            -DCMAKE_C_COMPILER=/mingw64/bin/gcc.exe \
            -DCMAKE_CXX_COMPILER=/mingw64/bin/g++.exe \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$MINGW_PREFIX" \
            -DCMAKE_PREFIX_PATH="/mingw64" \
            -DCMAKE_C_FLAGS="-O2 -DNDEBUG" \
            -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG" \
            -DCMAKE_AR=/mingw64/bin/ar.exe \
            -DCMAKE_RANLIB=/mingw64/bin/ranlib.exe \
            -DCMAKE_LINKER=/mingw64/bin/ld.exe \
            -DZIG_TARGET_TRIPLE=x86_64-windows-gnu \
            -DZIG_STATIC_LLVM=OFF \
            -DZIG_SHARED_LLVM=ON \
            -DZIG_VERSION="$ZIG_VERSION" \
            -DZIG_STATIC_ZLIB=OFF \
            -DZIG_STATIC_ZSTD=OFF \
            -DZIG_NO_LIB=ON \
            2>&1 | tee cmake-configure.log

           # Verify config files were generated properly
          if [ -f "config.zig" ]; then
            echo "config.zig generated successfully:"
            head -10 config.zig
          else
            echo "ERROR: config.zig was not generated"
            echo "Checking for config.zig.in:"
            ls -la config.zig*
            exit 1
          fi

          if [ -f "config.h" ]; then
            echo "config.h generated successfully:"
            head -10 config.h
          else
            echo "ERROR: config.h was not generated"
            echo "Checking for config.h.in:"
            ls -la config.h*
            exit 1
          fi

          # echo "Building with single-threaded linking for stability..."
          # $NINJA_CMD -j1 2>&1 | tee cmake-build.log ( old way )

      - name: Optimize and build with memory management
        shell: bash
        run: |
          echo "Optimizing build for Windows runner memory limits..."
          
          # Clean up any previous build artifacts to save space
          find . -name "*.o" -delete 2>/dev/null || true
          find . -name "*.obj" -delete 2>/dev/null || true
        
          echo "Build optimized for memory constraints"
                    cd zig-source/build  # ← ADDED THIS LINE 
          # Build with timeout for single-threaded compilation
          echo "Starting single-threaded build (this will take time)..."
          timeout 45m /mingw64/bin/ninja.exe -j1 2>&1 | tee cmake-build.log

          # Check the exit status of the timeout/ninja command
          build_exit_code=$?
              
          if [ $build_exit_code -eq 124 ]; then
              echo "ERROR: Build timed out after 45 minutes. Increase the timeout or investigate hang."
              exit 1
          elif [ $build_exit_code -ne 0 ]; then
              echo "Ninja build failed. Last 100 lines of log:"
              # Try to show log if it exists
              [ -f "cmake-build.log" ] && tail -100 cmake-build.log
              echo "Build directory contents:"
              ls -la
              exit 1
          fi              
              echo "Build completed successfully! Progressing to Stage 2"

      - name: Diagnose build failure
        if: failure()
        shell: bash
        run: |
          echo "=== Build Failure Diagnosis ==="
          echo "Current directory: $(pwd)"
          cd zig-source/build  # ← ADD THIS LINE
          echo "Current directory: $(pwd)"
          echo "Last 50 lines of build log:"
          tail -50 cmake-build.log || echo "No build log found"
          echo ""
          echo "Current memory usage:"
          free -h || echo "free command not available"
          echo ""
          echo "Largest files in build directory:"
          find . -name "*.c" -o -name "*.obj" -o -name "*.o" | xargs ls -laSh 2>/dev/null | head -10 || echo "No build files found"
          echo "=== ===================== ==="   
          
          # Verify the critical fields are present
          if grep -q "have_llvm" config.zig && grep -q "enable_logging" config.zig; then
            echo "✓ config.zig contains required fields"
          else
            echo "ERROR: config.zig is missing required fields"
            exit 1
          fi
          
          # Verify what was built
          echo "Build completed. Checking output:"
          ls -la *.exe || echo "No executables found"
          
          # Look for any zig executable
          ZIG_EXECUTABLE=""
          if [ -f "zig.exe" ]; then
            ZIG_EXECUTABLE="zig.exe"
          elif [ -f "zig1.exe" ]; then
            ZIG_EXECUTABLE="zig1.exe"
          elif [ -f "zig2.exe" ]; then
            ZIG_EXECUTABLE="zig2.exe"
          else
            echo "No zig executable found - checking subdirectories"
            find . -name "zig*.exe" -type f || echo "No zig executables found anywhere"
            exit 1
          fi
    
            echo "✓ $ZIG_EXECUTABLE built successfully"
            ./$ZIG_EXECUTABLE version || echo "Version check continued despite error"

      - name: Build Zig (Stage 2 - Self-hosted compiler)
        shell: bash
        env:
          MSYSTEM: MINGW64
          PATH: /mingw64/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin
        run: |
          echo "Building self-hosted compiler (Stage 2)..."
          cd zig-source/build
          
          # Find the bootstrap compiler
          ZIG_EXECUTABLE=""
          if [ -f "zig2.exe" ]; then
            ZIG_EXECUTABLE="zig2.exe"
          elif [ -f "zig1.exe" ]; then
            ZIG_EXECUTABLE="zig1.exe"
          elif [ -f "zig.exe" ]; then
            ZIG_EXECUTABLE="zig.exe"
          else
            echo "ERROR: No bootstrap zig executable found"
            ls -la *.exe || echo "No executables found"
            exit 1
          fi
          
          echo "Using bootstrap compiler: $ZIG_EXECUTABLE"
          
          # Build self-hosted compiler
          ./$ZIG_EXECUTABLE build-exe ../src/main.zig \
            -femit-bin=zig-stage2.exe \
            -OReleaseSafe \
            --name zig \
            --zig-lib-dir ../lib 2>&1 | tee stage2-build.log
          
          if [ -f "zig-stage2.exe" ]; then
            echo "✓ zig-stage2.exe built successfully"
            ./zig-stage2.exe version
          else
            echo "Stage2 build failed - checking log:"
            cat stage2-build.log
            exit 1
          fi

      - name: Build Zig (Stage 3 - Final optimized compiler)
        shell: bash
        env:
          MSYSTEM: MINGW64
          PATH: /mingw64/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin
        run: |
          echo "Building final optimized compiler (Stage 3)..."
          cd zig-source/build
          
          if [ -f "zig-stage2.exe" ]; then
            ./zig-stage2.exe build \
              --prefix stage3 \
              --zig-lib-dir ../lib \
              -Doptimize=ReleaseSafe \
              --verbose 2>&1 | tee stage3-build.log
            
            if [ -f "stage3/bin/zig.exe" ]; then
              echo "✓ Final Zig compiler built successfully"
              ./stage3/bin/zig.exe version
              ./stage3/bin/zig.exe targets
            else
              echo "Stage3 build failed - using stage2 as final"
              mkdir -p stage3/bin
              cp zig-stage2.exe stage3/bin/zig.exe
              echo "Using stage2 as final compiler"
            fi
          else
            echo "No stage2 compiler found for stage3 build"
            exit 1
          fi

      - name: Test the built compiler
        shell: bash
        env:
          MSYSTEM: MINGW64
          PATH: /mingw64/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin
        run: |
          echo "Testing the built compiler..."
          cd zig-source/build
          
          if [ -f "stage3/bin/zig.exe" ]; then
            # Basic functionality tests
            ./stage3/bin/zig.exe version
            ./stage3/bin/zig.exe targets
            
            # Simple compile test
            cat > test.zig << 'EOF'
          const std = @import("std");
          pub fn main() void {
              std.debug.print("Hello, Zig!\n", .{});
          }
          EOF
            
            ./stage3/bin/zig.exe build-exe test.zig
            ./test.exe
            
            echo "✓ All compiler tests passed"
          else
            echo "No final compiler found for testing"
            exit 1
          fi

      - name: Create package structure
        shell: bash
        env:
          MSYSTEM: MINGW64
          PATH: /mingw64/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin
        run: |
          echo "Creating mingw-w64 package structure..."
          cd zig-source/build
          
          # Create package directory structure
          mkdir -p "pkg/$MINGW_PREFIX"/{bin,lib,share/licenses/zig}
          
          # Install final compiler binary
          install -Dm755 stage3/bin/zig.exe "pkg/$MINGW_PREFIX/bin/zig.exe"
          
          # Install standard library (critical for Zig to function)
          cp -r ../lib "pkg/$MINGW_PREFIX/lib/zig"
          
          # Install license
          install -Dm644 ../LICENSE "pkg/$MINGW_PREFIX/share/licenses/zig/LICENSE"
          
          # Create package metadata for mingw-w64
          mkdir -p pkg/.MTREE
          cat > pkg/.MTREE/desc << EOF
          %NAME%
          mingw-w64-x86_64-zig
          
          %VERSION%
          $ZIG_VERSION-1
          
          %DESC%
          A general-purpose programming language and toolchain for maintaining robust, optimal, and reusable software
          
          %URL%
          https://ziglang.org/
          
          %ARCH%
          x86_64
          
          %BUILDDATE%
          $(date +%s)
          
          %PACKAGER%
          GitHub Actions
          
          %SIZE%
          $(du -sb pkg | cut -f1)
          
          %LICENSE%
          MIT
          
          %DEPENDS%
          mingw-w64-x86_64-llvm
          mingw-w64-x86_64-clang
          mingw-w64-x86_64-lld
          
          %PROVIDES%
          mingw-w64-x86_64-zig
          EOF

      - name: Create package archive
        shell: bash
        env:
          MSYSTEM: MINGW64
          PATH: /mingw64/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin
        run: |
          echo "Creating mingw-w64 package archive..."
          cd zig-source/build/pkg
          
          # Create package using mingw-w64 naming convention
          tar -czf "../../mingw-w64-x86_64-zig-$ZIG_VERSION-1-any.pkg.tar.gz" .MTREE *
          cd ../..
          
          # Verify package was created
          if [ -f "mingw-w64-x86_64-zig-$ZIG_VERSION-1-any.pkg.tar.gz" ]; then
            echo "✓ Package created successfully"
            ls -lh "mingw-w64-x86_64-zig-$ZIG_VERSION-1-any.pkg.tar.gz"
          else
            echo "Package creation failed"
            exit 1
          fi

      - name: Test package installation
        shell: bash
        env:
          MSYSTEM: MINGW64
          PATH: /mingw64/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin
        run: |
          echo "Testing package installation..."
          cd zig-source
          
          # Install the package
          pacman -U --noconfirm "mingw-w64-x86_64-zig-$ZIG_VERSION-1-any.pkg.tar.gz"
          
          # Test installed compiler
          zig version
          zig targets
          
          # Test compilation with installed version
          cat > package_test.zig << 'EOF'
          const std = @import("std");
          pub fn main() void {
              std.debug.print("Package test successful!\n", .{});
          }
          EOF
          
          zig build-exe package_test.zig
          ./package_test.exe
          
          echo "✓ Package installation and testing completed successfully"

      - name: Upload failure artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-artifacts-${{ github.run_number }}
          path: |
            zig-source/build/*.log
            zig-source/build/CMakeFiles/CMakeError.log
            zig-source/build/CMakeFiles/CMakeOutput.log
            zig-source/build/CMakeCache.txt
            zig-source/build/stage*/*.log
            zig-source/*.log
            build-report.md

      - name: Create build report
        if: always()
        shell: bash
        env:
          MSYSTEM: MINGW64
          PATH: /mingw64/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin
        run: |
          BUILD_REPORT="build-report.md"
          echo "# Zig Mingw-w64 Build Report" > "$BUILD_REPORT"
          echo "" >> "$BUILD_REPORT"
          echo "**Status:** ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}" >> "$BUILD_REPORT"
          echo "**Version:** $ZIG_VERSION" >> "$BUILD_REPORT"
          echo "**Build Jobs:** $BUILD_JOBS" >> "$BUILD_REPORT"
          echo "**Build Time:** $(date)" >> "$BUILD_REPORT"
          echo "**Workflow Run:** ${{ github.run_id }}" >> "$BUILD_REPORT"
          echo "" >> "$BUILD_REPORT"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "**Package:** mingw-w64-x86_64-zig-$ZIG_VERSION-1-any.pkg.tar.gz" >> "$BUILD_REPORT"
            if [ -f "zig-source/mingw-w64-x86_64-zig-$ZIG_VERSION-1-any.pkg.tar.gz" ]; then
              echo "**Size:** $(du -h "zig-source/mingw-w64-x86_64-zig-$ZIG_VERSION-1-any.pkg.tar.gz" | cut -f1)" >> "$BUILD_REPORT"
              # Add SHA256 checksum
              echo "**SHA256:** $(sha256sum "zig-source/mingw-w64-x86_64-zig-$ZIG_VERSION-1-any.pkg.tar.gz" | cut -d' ' -f1)" >> "$BUILD_REPORT"
            fi
            echo "**Compiler Path:** zig-source/build/stage3/bin/zig.exe" >> "$BUILD_REPORT"
            echo "" >> "$BUILD_REPORT"
            echo "## Build Steps Completed" >> "$BUILD_REPORT"
            echo "- ✅ Dependencies installed" >> "$BUILD_REPORT"
            echo "- ✅ Source downloaded and extracted" >> "$BUILD_REPORT"
            echo "- ✅ Stage 1 build (CMake)" >> "$BUILD_REPORT"
            echo "- ✅ Stage 2 build (Self-hosted)" >> "$BUILD_REPORT"
            echo "- ✅ Stage 3 build (Final)" >> "$BUILD_REPORT"
            echo "- ✅ Package created" >> "$BUILD_REPORT"
            echo "- ✅ Package tested" >> "$BUILD_REPORT"
          else
            echo "## Build Steps Status" >> "$BUILD_REPORT"
            
            # Check which steps completed successfully
            if [ -d "zig-source" ]; then
              echo "- ✅ Dependencies installed" >> "$BUILD_REPORT"
              echo "- ✅ Source downloaded and extracted" >> "$BUILD_REPORT"
              
              if [ -f "zig-source/build/zig.exe" ] || [ -f "zig-source/build/zig1.exe" ]; then
                echo "- ✅ Stage 1 build (CMake)" >> "$BUILD_REPORT"
              else
                echo "- ❌ Stage 1 build (CMake) failed" >> "$BUILD_REPORT"
              fi
              
              if [ -f "zig-source/build/zig-stage2.exe" ]; then
                echo "- ✅ Stage 2 build (Self-hosted)" >> "$BUILD_REPORT"
              else
                echo "- ❌ Stage 2 build (Self-hosted) failed" >> "$BUILD_REPORT"
              fi
              
              if [ -f "zig-source/build/stage3/bin/zig.exe" ]; then
                echo "- ✅ Stage 3 build (Final)" >> "$BUILD_REPORT"
              else
                echo "- ❌ Stage 3 build (Final) failed" >> "$BUILD_REPORT"
              fi
              
              if [ -f "zig-source/mingw-w64-x86_64-zig-$ZIG_VERSION-1-any.pkg.tar.gz" ]; then
                echo "- ✅ Package created" >> "$BUILD_REPORT"
              else
                echo "- ❌ Package creation failed" >> "$BUILD_REPORT"
              fi
            else
              echo "- ❌ Initial environment setup failed" >> "$BUILD_REPORT"
            fi
            
            echo "" >> "$BUILD_REPORT"
            echo "## Error Information" >> "$BUILD_REPORT"
            echo "Please check the uploaded logs for detailed error information." >> "$BUILD_REPORT"
          fi

      - name: Upload build report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-report-${{ github.run_number }}
          path: build-report.md

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: zig-mingw64-${{ env.ZIG_VERSION }}-package
          path: |
            zig-source/mingw-w64-x86_64-zig-*.pkg.tar.gz
            zig-source/build/stage3/bin/zig.exe

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.run_number }}
          path: |
            zig-source/build/*.log
            zig-source/build/stage*/*.log
            zig-source/*.log
            zig-source/*.log
