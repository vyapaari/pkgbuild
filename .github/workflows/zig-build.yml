name: Zig Mingw-w64 Build

on:
  push:
    branches: [main, master]
    paths: ['PKGBUILD', '.github/workflows/zig-build.yml']
  pull_request:
    branches: [main, master]
    paths: ['PKGBUILD']
  workflow_dispatch:

env:
  ZIG_VERSION: "0.15.1"
  BUILD_JOBS: 2
  MINGW_ARCH: mingw64
  MINGW_PREFIX: /mingw64

jobs:
  build-zig:
    runs-on: windows-latest
    timeout-minutes: 180

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Setup Git for Windows SDK
      uses: git-for-windows/setup-git-for-windows-sdk@v1
      with:
        flavor: makepkg-git

    - name: Set up SDK environment properly
      shell: bash
      run: |
        set -euo pipefail
        echo "Setting up Git SDK environment..."
        
        # Source the SDK's profile to set up the proper environment
        source /etc/profile
        
        # Ensure we're using the SDK's tools, not system ones
        export PATH="/usr/bin:/mingw64/bin:/bin"
        export MSYSTEM=MINGW64
        
        echo "Using Git from: $(which git)"
        echo "Using GCC from: $(which gcc)"
        echo "Using CMake from: $(which cmake)"
        echo "PATH: $PATH"
        
        # Verify we're using the right tools
        if [[ $(which git) == "/usr/bin/git" ]]; then
          echo "✓ Using SDK's Git"
        else
          echo "✗ Wrong Git version detected"
          exit 1
        fi

    - name: Install build dependencies
      shell: bash
      run: |
        set -euo pipefail
        echo "Installing Mingw-w64 build dependencies..."
        
        # Use the SDK's pacman
        pacman -S --noconfirm --needed \
          mingw-w64-x86_64-llvm \
          mingw-w64-x86_64-clang \
          mingw-w64-x86_64-lld \
          mingw-w64-x86_64-zlib \
          mingw-w64-x86_64-zstd \
          mingw-w64-x86_64-cmake \
          mingw-w64-x86_64-ninja \
          mingw-w64-x86_64-gcc \
          base-devel

    - name: Download and extract Zig source
      shell: bash
      run: |
        set -euo pipefail
        echo "Downloading Zig source..."
        source_url="https://ziglang.org/download/$ZIG_VERSION/zig-$ZIG_VERSION.tar.xz"
        echo "Downloading from: $source_url"
        
        curl -L --connect-timeout 30 --max-time 600 -o zig-source.tar.xz "$source_url" || exit 1
        
        echo "Extracting Zig source..."
        tar -xf zig-source.tar.xz || exit 1
        mv "zig-$ZIG_VERSION" zig-source || exit 1

    - name: Configure build environment
      shell: bash
      run: |
        set -euo pipefail
        echo "Preparing build environment..."
        cd zig-source
        
        mkdir -p build || exit 1
        cd build
        
        mkdir -p ../stage1 || exit 1
        cat > ../stage1/config.h.in << EOF
        #pragma once
        #define ZIG_VERSION_STRING "$ZIG_VERSION"
        #define ZIG_VERSION_MAJOR 0
        #define ZIG_VERSION_MINOR 15
        #define ZIG_VERSION_PATCH 1
        EOF

        cat > ../stage1/config.zig.in << EOF
        pub const version_string = "$ZIG_VERSION";
        pub const version_major = 0;
        pub const version_minor = 15;
        pub const version_patch = 1;
        EOF

        cat > config.zig << EOF 
        pub const version_string = "$ZIG_VERSION";
        pub const version_major = 0;
        pub const version_minor = 15;
        pub const version_patch = 1;
        pub const enable_llvm = true;
        pub const enable_zlib = true;
        pub const enable_zstd = true;
        pub const target = "x86_64-windows-gnu";
        pub const optimize = "ReleaseSafe";
        EOF

    - name: Build Zig (Stage 1 - CMake)
      shell: bash
      run: |
        set -euo pipefail
        echo "Starting CMake build (Stage 1)..."
        
        source /etc/profile
        export PATH="/usr/bin:/mingw64/bin:/bin"
        export MSYSTEM=MINGW64
        
        cd zig-source/build
        
        echo "Testing CMake execution..."
        if /mingw64/bin/cmake --version >/dev/null 2>&1; then
          echo "✓ CMake can execute properly"
        else
          echo "✗ CMake found but cannot execute - checking dependencies..."
          pacman -S --noconfirm --needed mingw-w64-x86_64-gcc-libs || echo "GCC libs install may have failed"
          pacman -S --noconfirm --needed mingw-w64-x86_64-winpthreads || echo "Winpthreads install may have failed"
          
          if /mingw64/bin/cmake --version >/dev/null 2>&1; then
            echo "✓ CMake now works after dependency install"
          else
            echo "✗ CMake still cannot execute - trying alternative approach"
          fi
        fi
        
        echo "Current directory: $(pwd)"
        echo "Contents of parent directory:"
        ls -la ../
        
        echo "Attempting CMake configuration..."
        MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
        /mingw64/bin/cmake .. -GNinja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX="$MINGW_PREFIX" \
          -DZIG_SHARED_LLVM=ON \
          -DZIG_USE_LLD=ON 2>&1 | tee cmake-configure.log
        
        if [ $? -eq 0 ]; then
          echo "✓ CMake configuration successful"
          /mingw64/bin/ninja -j"$BUILD_JOBS" -l"$BUILD_JOBS" 2>&1 | tee cmake-build.log || exit 1
        else
          echo "✗ CMake configuration failed, checking log..."
          cat cmake-configure.log | tail -20
          echo "Trying even simpler configuration..."
          
          MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
          /mingw64/bin/cmake .. -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$MINGW_PREFIX" 2>&1 | tee cmake-configure-minimal.log
            
          if [ $? -eq 0 ]; then
            echo "✓ Minimal CMake configuration successful"
            /mingw64/bin/ninja -j"$BUILD_JOBS" -l"$BUILD_JOBS" 2>&1 | tee cmake-build.log || exit 1
          else
            echo "✗ Even minimal CMake configuration failed"
            cat cmake-configure-minimal.log | tail -20
            exit 1
          fi
        fi
        
        if [ -f "zig2.exe" ]; then
          echo "✓ zig2.exe built successfully"
        else
          echo "✗ zig2.exe not found"
          ls -la *.exe
          exit 1
        fi

    - name: Build Zig (Stage 2 - Self-hosted compiler)
      shell: bash
      run: |
        set -euo pipefail
        echo "Building self-hosted compiler with zig2 (Stage 2)..."
        cd zig-source/build
        
        ./zig2.exe build-exe ../src/main.zig \
          -femit-bin=minizig.exe \
          -OReleaseSafe \
          -Dbuild_options=config.zig 2>&1 | tee stage2-build.log || echo "Build may have failed due to DLL issues, continuing..."
        
        if [ -f "minizig.exe" ]; then
          echo "✓ minizig.exe built successfully"
        else
          echo "✗ minizig.exe build failed - trying fallback without build_options"
          ./zig2.exe build-exe ../src/main.zig \
            -femit-bin=minizig.exe \
            -OReleaseSafe 2>&1 | tee stage2-fallback.log || echo "Fallback build may have failed, continuing..."
          
          if [ -f "minizig.exe" ]; then
            echo "✓ minizig.exe built with fallback method"
          else
            echo "✗ Both stage2 build attempts failed"
            exit 1
          fi
        fi

    - name: Build Zig (Stage 3 - Final optimized compiler)
      shell: bash
      run: |
        set -euo pipefail
        echo "Building final stage3 compiler..."
        cd zig-source/build
        
        if [ -f "minizig.exe" ]; then
          ./minizig.exe build \
            --prefix stage3 \
            --zig-lib-dir ../lib \
            -Dversion-string="$ZIG_VERSION" \
            -Dtarget=x86_64-windows-gnu \
            -Doptimize=ReleaseSafe \
            --verbose 2>&1 | tee stage3-build.log || exit 1
          
          if [ -f "stage3/bin/zig.exe" ]; then
            echo "✓ Final Zig compiler built successfully"
          else
            echo "✗ Final compiler build failed"
            exit 1
          fi
        else
          echo "✗ No minizig.exe found for stage3 build"
          exit 1
        fi

    - name: Test the built compiler
      shell: bash
      run: |
        set -euo pipefail
        echo "Testing the built compiler..."
        cd zig-source/build
        
        if [ -f "stage3/bin/zig.exe" ]; then
          echo "✓ Compiler found at stage3/bin/zig.exe"
        else
          echo "✗ No compiler found for testing"
          exit 1
        fi

    - name: Create package structure
      shell: bash
      run: |
        set -euo pipefail
        echo "Creating mingw-w64 package structure..."
        cd zig-source/build
        
        mkdir -p "pkg/$MINGW_PREFIX"/{bin,lib,share/licenses/zig} || exit 1
        
        install -Dm755 stage3/bin/zig.exe "pkg/$MINGW_PREFIX/bin/zig.exe" || exit 1
        cp -r ../lib "pkg/$MINGW_PREFIX/lib/zig" || exit 1
        install -Dm644 ../LICENSE "pkg/$MINGW_PREFIX/share/licenses/zig/LICENSE" || exit 1
        
        mkdir -p pkg/.MTREE || exit 1
        cat > pkg/.MTREE/package << EOF
        #mtree
        ./usr time=$(date +%s)
        ./usr/bin time=$(date +%s)
        ./usr/bin/zig.exe time=$(date +%s) mode=755
        ./usr/lib time=$(date +%s)
        ./usr/lib/zig time=$(date +%s)
        ./usr/share time=$(date +%s)
        ./usr/share/licenses time=$(date +%s)
        ./usr/share/licenses/zig time=$(date +%s)
        ./usr/share/licenses/zig/LICENSE time=$(date +%s) mode=644
        EOF

    - name: Create package archive
      shell: bash
      run: |
        set -euo pipefail
        echo "Creating mingw-w64 package archive..."
        cd zig-source/build/pkg
        
        tar -cf - .MTREE * | zstd -z -19 - > "../../mingw-w64-x86_64-zig-$ZIG_VERSION-1-any.pkg.tar.zst" || exit 1
        cd ../..
        
        if [ -f "mingw-w64-x86_64-zig-$ZIG_VERSION-1-any.pkg.tar.zst" ]; then
          echo "✓ Package created successfully"
          ls -la "mingw-w64-x86_64-zig-$ZIG_VERSION-1-any.pkg.tar.zst"
        else
          echo "✗ Package creation failed"
          exit 1
        fi

    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: zig-mingw64-package
        path: |
          zig-source/mingw-w64-x86_64-zig-*.pkg.tar.zst
          zig-source/build/stage3/bin/zig.exe

    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          zig-source/build/*.log

    - name: Upload failure artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: failure-artifacts
        path: |
          zig-source/build/
          zig-source/