name: Zig mingw-w64 Build

on:
  push:
    paths:
      - 'PKGBUILD'
      - '.github/workflows/zig-build.yml'
  pull_request:
    branches: [main, master]
    paths: ['PKGBUILD']
  workflow_dispatch:

env:
  ZIG_VERSION: "0.15.1"
  BUILD_JOBS: 2
  MINGW_ARCH: mingw64
  MINGW_PREFIX: /mingw64

jobs:
  build-zig:
    runs-on: windows-latest
    timeout-minutes: 180
    steps:
      - name: Setup Git for Windows SDK
        uses: git-for-windows/setup-git-for-windows-sdk@v1
        with:
          flavor: makepkg-git

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Verify Git SDK environment
        shell: bash
        run: |
          echo "Git version: $(git --version)"
          echo "Makepkg version: $(makepkg --version)"

      - name: Install build dependencies
        shell: bash
        run: |
          set -euo pipefail
          echo "Updating pacman database and installing dependencies..."
          for i in {1..5}; do
            pacman -Sy --noconfirm && break || sleep 10
          done
          pacman -S --noconfirm --needed \
            mingw-w64-x86_64-cmake \
            mingw-w64-x86_64-ninja \
            mingw-w64-x86_64-llvm \
            mingw-w64-x86_64-lld \
            base-devel

      - name: Download and extract Zig source
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d zig-source ]; then
            curl -L -o zig-${ZIG_VERSION}.tar.xz https://ziglang.org/download/${ZIG_VERSION}/zig-${ZIG_VERSION}.tar.xz
            mkdir zig-source
            tar -xf zig-${ZIG_VERSION}.tar.xz -C zig-source --strip-components=1
          fi

      - name: Configure build environment
        shell: bash
        run: |
          set -euo pipefail
          cd zig-source
          mkdir -p build

      - name: Generate build files
        shell: bash
        run: |
          set -euo pipefail
          cd zig-source/build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build Zig
        shell: bash
        run: |
          set -euo pipefail
          cd zig-source
          ninja -j${BUILD_JOBS} -C build

      - name: Create package
        shell: bash
        run: |
          set -euo pipefail
          cd zig-source
          mkdir -p ${MINGW_PREFIX}/bin
          cp -v build/zig.exe ${MINGW_PREFIX}/bin/
          cp -v build/lib/lib*.dll ${MINGW_PREFIX}/bin/ || true
          pacman -Syu --noconfirm
          makepkg-mingw --noconfirm --nodeps

      - name: Create build report
        if: always()
        shell: bash
        run: |
          echo "# Zig Mingw-w64 Build Report" > build-report.md
          echo "**Status:** ${{ job.status }}" >> build-report.md
          echo "**Build Jobs:** ${BUILD_JOBS}" >> build-report.md
          echo "**Build Time:** $(date)" >> build-report.md
          echo "**Workflow Run:** ${{ github.run_id }}" >> build-report.md
          if [[ "${{ job.status }}" == "success" ]]; then
            if [ -f "zig-source/mingw-w64-x86_64-zig-${ZIG_VERSION}-1-any.pkg.tar.zst" ]; then
              echo "**Package:** mingw-w64-x86_64-zig-${ZIG_VERSION}-1-any.pkg.tar.zst" >> build-report.md
              ls -lh zig-source/mingw-w64-x86_64-zig-${ZIG_VERSION}-1-any.pkg.tar.zst >> build-report.md
            else
              echo "**Package:** Unknown" >> build-report.md
            fi
          else
            echo "**Build Failed:** Check logs for details" >> build-report.md
          fi
          echo "**Compiler Path:** zig-source/build/zig.exe" >> build-report.md

      - name: Upload build report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build-report.md

      - name: Upload built package
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: zig-package
          path: zig-source/mingw-w64-x86_64-zig-${{ env.ZIG_VERSION }}-1-any.pkg.tar.zst